#!/usr/bin/env bash

set -e

APP_NAME="dvs"
# VERSION="v1.0.0"  # optional: tag version
OUTPUT_DIR="releases"

# List of OS/ARCH combinations
PLATFORMS=(
  "linux/amd64"
  "linux/arm64"
  "darwin/amd64"
  "darwin/arm64"
  "windows/amd64"
  "windows/arm64"
)

# Clean and recreate output directory
rm -rf "$OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

echo "Building $APP_NAME for multiple platforms..."

for PLATFORM in "${PLATFORMS[@]}"; do
  IFS="/" read -r GOOS GOARCH <<< "$PLATFORM"
  BIN_NAME="$APP_NAME"
  ARCHIVE_NAME="${APP_NAME}-${GOOS}-${GOARCH}"
  
  if [ "$GOOS" = "windows" ]; then
    BIN_NAME="${APP_NAME}.exe"
    ARCHIVE_FILE="${OUTPUT_DIR}/${ARCHIVE_NAME}.zip"
  else
    ARCHIVE_FILE="${OUTPUT_DIR}/${ARCHIVE_NAME}.tar.gz"
  fi

  echo "→ Building for $GOOS/$GOARCH"

  # Set env vars and build
  env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -o "$BIN_NAME"

  # Package binary
  mkdir -p tmp_build
  mv "$BIN_NAME" tmp_build/
  
  # Copy LICENSE and README files if they exist
  for file in LICENSE README.md; do
    if [ -f "$file" ]; then
      cp "$file" tmp_build/
    fi
  done
  
  if [[ "$ARCHIVE_FILE" == *.zip ]]; then
    (cd tmp_build && zip -r "../$ARCHIVE_FILE" * > /dev/null)
  else
    (cd tmp_build && tar -czf "../$ARCHIVE_FILE" *)
  fi

  # Cleanup temp
  rm -rf tmp_build
done

echo "✅ All binaries built and packaged in ./$OUTPUT_DIR"
